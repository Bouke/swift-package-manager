//
//  zsh_template.swift
//  SwiftPM
//
//  Created by Bouke Haarsma on 29/09/2016.
//
//

import Foundation
import Basic

func zsh_template(print: (String) -> ()) {
    print("#compdef swift")
    print("local context state state_descr line")
    print("typeset -A opt_args")
    print("")
    print("_swift() {")
    print("    declare -a shared_options")
    print("    shared_options=(")
    print("        '(-C --chdir)'{-C,--chdir}\"[Change working directory before any other operation]: :_files\"")
    print("        \"--color[Specify color mode (auto|always|never)]: :{_values \"mode\" auto always never}\"")
    print("        '(-v --verbose)'{-v,--verbose}'[Increase verbosity of informational output]'")
    print("        \"-Xcc[Pass flag through to all C compiler invocations]: : \"")
    print("        \"-Xlinker[Pass flag through to all linker invocations]: : \"")
    print("        \"-Xswiftc[Pass flag through to all Swift compiler invocations]: : \"")
    print("    )")
    print("")
    print("    _arguments -C \\")
    print("        '(- :)--help[prints the synopsis and a list of the most commonly used commands]: :->arg' \\")
    print("        '(-): :->command' \\")
    print("        '(-)*:: :->arg' && return")
    print("")
    print("    case $state in")
    print("        (command)")
    print("            local tools")
    print("            tools=(")
    print("                'build:build the package'")
    print("                'package:package management'")
    print("                'test:run tests'")
    print("            )")
    print("            _alternative \\")
    print("                'tools:common:{_describe \"tool\" tools }' \\")
    print("                'compiler: :_swift_compiler' && _ret=0")
    print("            ;;")
    print("        (arg)")
    print("            case ${words[1]} in")
    print("                (build)")
    print("                    _swift_build")
    print("                    ;;")
    print("                (package)")
    print("                    _swift_package")
    print("                    ;;")
    print("                (test)")
    print("                    _swift_test")
    print("                    ;;")
    print("                (*)")
    print("                    _swift_compiler")
    print("                    ;;")
    print("            esac")
    print("            ;;")
    print("    esac")
    print("}")
    print("")
    print("_swift_build() {")
    print("    local -a arguments")
    print("    arguments=(")
    for option in BuildToolMode.options.flatMap({ $0 as? OptionFlag }) {
        print("        \(option.shellDescription(.zsh))")
    }
    print("    )")
    print("    _arguments $arguments")
    print("}")
    print("")
    print("_swift_package() {")
    print("    local -a commands")
    print("    commands=(")
    for option in PackageMode.options_.flatMap({ $0 as? OptionMode }) {
        print("        \(option.shellDescription(.zsh))")
    }
    print("    )")
    print("    _arguments \\")
    print("        '(-): :{_describe \"commands\" commands}' \\")
    for option in PackageMode.options_.flatMap({ $0 as? OptionFlag }) {
        print("        \(option.shellDescription(.zsh)) \\")
    }
    print("        '(-)*:: :->arg'")
    print("")
    print("    case $state in")
    print("        (arg)")
    print("            declare -a package_options")
    print("            package_options=(")
    print("                $shared_options")
    print("                \"--enable-code-coverage[Enable code coverage in generated Xcode projects]\"")
    print("            )")
    print("")
    print("            case ${words[1]} in")
    for mode in PackageMode.options_.flatMap({ $0 as? OptionMode }) {
        print("                (\(mode.name))")
        print("                    _arguments \\")
        for flag in mode.options.flatMap({ $0 as? OptionFlag }) {
            print("                        \(flag.shellDescription(.zsh)) \\")
        }
        print("                    ;;")
    }
    print("            esac")
    print("            ;;")
    print("    esac")
    print("}")
    print("")
    print("_swift_test() {")
    print("    _arguments \\")
    print("        '(-s --specifier)'{-s,--specifier}'[Run a test case subclass <test-module>.<test-case>]: : ' \\")
    print("        '(-s --specifier)'{-s,--specifier}'[Run a specific test method <test-module>.<test-case>/<test>]: : ' \\")
    print("        '(-l --list-tests)'{-l,--list-tests}'[Lists test methods in specifier format]' \\")
    print("        '--skip-build[Skip building the test target]' \\")
    print("        \"--version[Print the Swift Package Manager version]\" \\")
    print("        $shared_options")
    print("}")
    print("")
    print("_swift_compiler() {")
    print("    declare -a build_options")
    print("    build_options=(")
    print("        '-assert-config[Specify the assert_configuration replacement.]: :{_values \"\" Debug Release Unchecked DisableReplacement}'")
    print("        '-D[Marks a conditional compilation flag as true]: : '")
    print("        '-framework[Specifies a framework which should be linked against]: : '")
    print("        '-F[Add directory to framework search path]: :_files'")
    print("        '-gdwarf-types[Emit full DWARF type info.]'")
    print("        '-gline-tables-only[Emit minimal debug info for backtraces only]'")
    print("        \"-gnone[Don't emit debug info]\"")
    print("        '-g[Emit debug info. This is the preferred setting for debugging with LLDB.]'")
    print("        '-help[Display available options]'")
    print("        '-index-store-path[Store indexing data to <path>]: :_files'")
    print("        '-I[Add directory to the import search path]: :_files'")
    print("        '-j[Number of commands to execute in parallel]: : '")
    print("        '-L[Add directory to library link search path]: :_files'")
    print("        '-l-[Specifies a library which should be linked against]: : '")
    print("        '-module-cache-path[Specifies the Clang module cache path]: :_files'")
    print("        '-module-link-name[Library to link against when using this module]: : '")
    print("        '-module-name[Name of the module to build]: : '")
    print("        \"-nostdimport[Don't search the standard library import path for modules]\"")
    print("        '-num-threads[Enable multi-threading and specify number of threads]: : '")
    print("        '-Onone[Compile without any optimization]'")
    print("        '-Ounchecked[Compile with optimizations and remove runtime safety checks]'")
    print("        '-O[Compile with optimizations]'")
    print("        '-sdk[Compile against <sdk>]: : '")
    print("        '-static-stdlib[Statically link the Swift standard library]'")
    print("        '-suppress-warnings[Suppress all warnings]'")
    print("        '-target-cpu[Generate code for a particular CPU variant]: : '")
    print("        '-target[Generate code for the given target]: : '")
    print("        '-use-ld=-[Specifies the linker to be used]'")
    print("        '-version[Print version information and exit]'")
    print("        '-v[Show commands to run and use verbose output]'")
    print("        '-warnings-as-errors[Treat warnings as errors]'")
    print("        '-Xcc[Pass <arg> to the C/C++/Objective-C compiler]: : '")
    print("        '-Xlinker[Specifies an option which should be passed to the linker]: : '")
    print("        '*:inputs:_files'")
    print("    )")
    print("    _arguments $build_options")
    print("}")
    print("")
    print("_swift")
}
