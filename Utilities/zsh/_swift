#compdef swift
local context state state_descr line
typeset -A opt_args

_swift() {
    declare -a shared_options
    shared_options=(
        '(-C --chdir)'{-C,--chdir}"[Change working directory before any other operation]: :_files"
        "--color[Specify color mode (auto|always|never)]: :{_values "mode" auto always never}"
        '(-v --verbose)'{-v,--verbose}'[Increase verbosity of informational output]'
        "-Xcc[Pass flag through to all C compiler invocations]: : "
        "-Xlinker[Pass flag through to all linker invocations]: : "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]: : "
    )

    _arguments -C \
        '(- :)--help[prints the synopsis and a list of the most commonly used commands]: :->arg' \
        '(-): :->command' \
        '(-)*:: :->arg' && return

    case $state in
        (command)
            local tools
            tools=(
                'build:build the package'
                'package:package management'
                'test:run tests'
            )
            _alternative \
                'tools:common:{_describe "tool" tools }' \
                'compiler: :_swift_compiler' && _ret=0
            ;;
        (arg)
            case ${words[1]} in
                (build)
                    _swift_build
                    ;;
                (package)
                    _swift_package
                    ;;
                (test)
                    _swift_test
                    ;;
                (*)
                    _swift_compiler
                    ;;
            esac
            ;;
    esac
}

_swift_build() {
    local -a arguments
    arguments=(
        '-Xcc[Pass flag through to all C compiler invocations]: : '
        '-Xswiftc[Pass flag through to all Swift compiler invocations]: : '
        '-Xlinker[Pass flag through to all linker invocations]: : '
        '--build-path[Specify build/cache directory ]: :_files'
        '(--chdir -C)'{--chdir,-C}'[Change working directory before any other operation]: :_files'
        '--color[Specify color mode (auto|always|never) ]: :{_values "" auto always never}'
        '--enable-new-resolver[]'
        '--version[]'
        '(--verbose -v)'{--verbose,-v}'[Increase verbosity of informational output]'
        '--build-tests[]'
        '--clean[]'
        '(--configuration -c)'{--configuration,-c}'[Build with configuration (debug|release) ]: :{_values "" debug release}'
    )
    _arguments $arguments
}

_swift_package() {
    local -a arguments
    arguments=(
        '-Xcc[Pass flag through to all C compiler invocations]: : '
        '-Xswiftc[Pass flag through to all Swift compiler invocations]: : '
        '-Xlinker[Pass flag through to all linker invocations]: : '
        '--build-path[Specify build/cache directory ]: :_files'
        '(--chdir -C)'{--chdir,-C}'[Change working directory before any other operation]: :_files'
        '--color[Specify color mode (auto|always|never) ]: :{_values "" auto always never}'
        '--enable-new-resolver[]'
        '--version[]'
        '(--verbose -v)'{--verbose,-v}'[Increase verbosity of informational output]'
        '--version[]'
    )
    _arguments $arguments
}

_swift_test() {
    local -a arguments
    arguments=(
        '-Xcc[Pass flag through to all C compiler invocations]: : '
        '-Xswiftc[Pass flag through to all Swift compiler invocations]: : '
        '-Xlinker[Pass flag through to all linker invocations]: : '
        '--build-path[Specify build/cache directory ]: :_files'
        '(--chdir -C)'{--chdir,-C}'[Change working directory before any other operation]: :_files'
        '--color[Specify color mode (auto|always|never) ]: :{_values "" auto always never}'
        '--enable-new-resolver[]'
        '--version[]'
        '(--verbose -v)'{--verbose,-v}'[Increase verbosity of informational output]'
        '(--configuration -c)'{--configuration,-c}'[Build with configuration (debug|release) ]: :{_values "" debug release}'
        '--skip-build[Skip building the test target]'
        '(--list-tests -l)'{--list-tests,-l}'[Lists test methods in specifier format]'
        '--parallel[]'
        '(--specifier -s)'{--specifier,-s}'[Run a specific test class or method, Format: <test-module>.<test-case> or <test-module>.<test-case>/<test>]: : '
    )
    _arguments $arguments
}

_swift_compiler() {
    declare -a build_options
    build_options=(
        '-assert-config[Specify the assert_configuration replacement.]: :{_values "" Debug Release Unchecked DisableReplacement}'
        '-D[Marks a conditional compilation flag as true]: : '
        '-framework[Specifies a framework which should be linked against]: : '
        '-F[Add directory to framework search path]: :_files'
        '-gdwarf-types[Emit full DWARF type info.]'
        '-gline-tables-only[Emit minimal debug info for backtraces only]'
        "-gnone[Don't emit debug info]"
        '-g[Emit debug info. This is the preferred setting for debugging with LLDB.]'
        '-help[Display available options]'
        '-index-store-path[Store indexing data to <path>]: :_files'
        '-I[Add directory to the import search path]: :_files'
        '-j[Number of commands to execute in parallel]: : '
        '-L[Add directory to library link search path]: :_files'
        '-l-[Specifies a library which should be linked against]: : '
        '-module-cache-path[Specifies the Clang module cache path]: :_files'
        '-module-link-name[Library to link against when using this module]: : '
        '-module-name[Name of the module to build]: : '
        "-nostdimport[Don't search the standard library import path for modules]"
        '-num-threads[Enable multi-threading and specify number of threads]: : '
        '-Onone[Compile without any optimization]'
        '-Ounchecked[Compile with optimizations and remove runtime safety checks]'
        '-O[Compile with optimizations]'
        '-sdk[Compile against <sdk>]: : '
        '-static-stdlib[Statically link the Swift standard library]'
        '-suppress-warnings[Suppress all warnings]'
        '-target-cpu[Generate code for a particular CPU variant]: : '
        '-target[Generate code for the given target]: : '
        '-use-ld=-[Specifies the linker to be used]'
        '-version[Print version information and exit]'
        '-v[Show commands to run and use verbose output]'
        '-warnings-as-errors[Treat warnings as errors]'
        '-Xcc[Pass <arg> to the C/C++/Objective-C compiler]: : '
        '-Xlinker[Specifies an option which should be passed to the linker]: : '
        '*:inputs:_files'
    )
    _arguments $build_options
}

_swift
